// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ratings       Ratings[]
  annotations   Annotations[]
}

/// Maps User Ids to BCP-47 Language Codes.
model UserLanguages {
  // Key Fields
  id            String    @id

  // Content Fields
  language      String[]
}

/// Maps User Ids and BCP-47 Language Codes to  Annotation Task Type IDs.
model UserLanguageTasks {
  // Key Fields
  id             String
  primaryLang    String

  // Identifiers for each task a user is registered for.  These arrays are all
  // index aligned.
  taskModes      Int[]
  taskCategories Int[]
  secondaryLang  String[]

  @@id([id, primaryLang])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  // Key Fields
  fprint       String @unique
  language     String

  // Content Fields
  text         String

  // Provenance Fields
  source       Int @default(0)
  license      String?
  origin       String?
  originId     String?

  annotations  Annotations[]

  @@id([fprint, language])
}

model Annotations {
  // Key Fields
  id             BigInt @id @default(autoincrement())

  // Association Fields
  source         Content @relation(fields: [sourceFprint], references: [fprint])
  sourceFprint   String

  // Content Fields
  primaryLang    String
  text           String
  isComplete     Boolean @default(false)
  
  taskCategoryId Int
  taskModeId     Int

  // Provenance Fields
  createdAt      DateTime @default(now())

  ratings        Ratings[]

  author         User? @relation(fields: [authorId], references: [id])
  authorId       String? 
}

model Ratings {
  // Key Fields
  id           BigInt @id @default(autoincrement())

  // Association Fields
  annotation   Annotations @relation(fields: [annotationId], references: [id])
  annotationId BigInt

  user         User     @relation(fields: [userId], references: [id])
  userId       String

  // Content Fields
  rating       Int

  // Provenance Fields
  createdAt    DateTime @default(now())
}

// Records available milestones for language pairs and tasks.  This table is
// used to determine what tasks users can contribute towards at any point in
// time.
model TaskMilestones {
  // Language pair information for the milestone.
  primaryLang    String
  secondaryLang  String

  // The Task Category tracked by this milestone.
  taskCategoryId Int 
  // The specific Task Mode tracked by this milestone.
  taskModeId     Int

  // The type of milestone being recorded.
  milestoneType  String

  // The current milestone and progress towards that milestone.
  milestone      Int
  progress       Int

  dateUpdated    DateTime @default(now())

  @@id([primaryLang, secondaryLang, taskCategoryId, taskModeId, milestoneType])
}

/// Records details for each task category.
model TaskCategory {
  // The unique key.
  id          Int @id 

  // A short name that can double as a class type.
  shortName   String

  // Human readable text.  Later this should be a localization key.
  fullName    String
  description String

  // Records the mode stages for this category.  Tasks start in the first mode
  // and then are available as new tasks in the second mode.
  //
  // As an example, if the modes are [1, 3, 5] then:
  //  - Initially, only mode 1 tasks are available.
  //  - As mode 1 tasks complete, then mode 3 tasks are made available.
  //  - As mode 3 tasks complete, then mode 5 tasks are made available.
  //  - Once all mode 5 tasks complete, all tasks are done.
  modes       TaskMode[]
}

/// Records details for each task modality.
model TaskMode {
  // The unique key.
  id          Int @id 

  // A short name that can double as a class type.
  shortName   String

  // Human readable text.  Later this should be a localization key.
  fullName    String
  description String

  // When true, it means tasks come directly from the Contents table.
  useContent  Boolean @default(false)

  // Reverse links to all Task Categories using this TaskMode.
  //
  // Prisma requires this for implicit many to many relations.
  categories  TaskCategory[]
}
